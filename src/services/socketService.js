import { io } from 'socket.io-client'
import { useAuthStore } from 'src/stores/auth'

class SocketService {
  constructor() {
    this.socket = null
    this.connected = false
    this.reconnectAttempts = 0
    this.maxReconnectAttempts = 5
  }

  /**
   * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è Socket.io URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É
   */
  getSocketUrl() {
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –¥–æ–º–µ–Ω –∑ window.location
    const currentHost = window.location.hostname
    const currentProtocol = window.location.protocol === 'https:' ? 'https' : 'http'

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ Socket.io URL –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–æ–º–µ–Ω—É
    if (currentHost.includes('localhost') || currentHost.includes('127.0.0.1')) {
      // –õ–æ–∫–∞–ª—å–Ω–∞ —Ä–æ–∑—Ä–æ–±–∫–∞
      return 'http://localhost:3000'
    } else if (currentHost.includes('test-erp.cooprin.com.ua')) {
      // –¢–µ—Å—Ç–æ–≤–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      return 'https://test-erp.cooprin.com.ua'
    } else if (currentHost.includes('erp.cooprin.com.ua')) {
      // Production —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ
      return 'https://erp.cooprin.com.ua'
    } else {
      // Fallback - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª —ñ —Ö–æ—Å—Ç
      return `${currentProtocol}://${currentHost}`
    }
  }

  connect() {
    const authStore = useAuthStore()

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–æ–∫–µ–Ω —ñ —á–∏ –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ
    if (!authStore.token || this.connected) {
      return
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π Socket.io URL
    const socketUrl = this.getSocketUrl()

    console.log('üîå Connecting to Socket.io:', socketUrl)

    this.socket = io(socketUrl, {
      auth: {
        token: authStore.token,
      },
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–±–∏–¥–≤–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏ –¥–ª—è –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
      transports: ['websocket', 'polling'],
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
      timeout: 20000,
      reconnection: true,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      maxReconnectionAttempts: this.maxReconnectAttempts,
    })

    this.setupEventHandlers()
  }

  setupEventHandlers() {
    this.socket.on('connect', () => {
      console.log('‚úÖ Socket.io connected successfully')
      this.connected = true
      this.reconnectAttempts = 0

      // –ó–∞–ø–∏—Ç—É—î–º–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
      this.socket.emit('get_unread_notifications')
    })

    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå Socket.io disconnected:', reason)
      this.connected = false
    })

    this.socket.on('connect_error', (error) => {
      console.error('üö´ Socket.io connection error:', error)
      this.connected = false

      // –ê–≤—Ç–æ—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º —Å–ø—Ä–æ–±
      if (this.reconnectAttempts < this.maxReconnectAttempts) {
        this.reconnectAttempts++
        console.log(`üîÑ Reconnect attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts}`)

        setTimeout(() => {
          if (!this.connected) {
            this.connect()
          }
        }, 2000 * this.reconnectAttempts)
      } else {
        console.warn('üõë Max reconnection attempts reached. Socket.io disabled.')
      }
    })

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
    this.setupNotificationHandlers()
    this.setupChatHandlers()
  }

  setupNotificationHandlers() {
    // –ù–æ–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    this.socket.on('new_notification', (data) => {
      console.log('üîî New notification received:', data)

      // –ï–º—ñ—Ç–∏–º–æ custom event –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
      window.dispatchEvent(
        new CustomEvent('socket:new_notification', {
          detail: data,
        }),
      )
    })

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö
    this.socket.on('unread_count_updated', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:unread_count_updated', {
          detail: data,
        }),
      )
    })

    // –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω–µ
    this.socket.on('notification_read', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:notification_read', {
          detail: data,
        }),
      )
    })

    // –í—Å—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ—á–∏—Ç–∞–Ω—ñ
    this.socket.on('notifications_all_read', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:notifications_all_read', {
          detail: data,
        }),
      )
    })

    // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å
    this.socket.on('unread_notifications_count', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:unread_notifications_count', {
          detail: data,
        }),
      )
    })
  }

  setupChatHandlers() {
    // –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç—ñ
    this.socket.on('new_message', (data) => {
      console.log('üí¨ New chat message received:', data)

      window.dispatchEvent(
        new CustomEvent('socket:new_message', {
          detail: data,
        }),
      )
    })

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏
    this.socket.on('user_joined_room', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:user_joined_room', {
          detail: data,
        }),
      )
    })

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–∫–∏–Ω—É–≤ –∫—ñ–º–Ω–∞—Ç—É
    this.socket.on('user_left_room', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:user_left_room', {
          detail: data,
        }),
      )
    })

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–±–∏—Ä–∞—î —Ç–µ–∫—Å—Ç
    this.socket.on('user_typing', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:user_typing', {
          detail: data,
        }),
      )
    })

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–∏–ø–∏–Ω–∏–≤ –Ω–∞–±–∏—Ä–∞—Ç–∏
    this.socket.on('user_stopped_typing', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:user_stopped_typing', {
          detail: data,
        }),
      )
    })

    // –ß–∞—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π
    this.socket.on('chat_assigned', (data) => {
      window.dispatchEvent(
        new CustomEvent('socket:chat_assigned', {
          detail: data,
        }),
      )
    })
  }

  // –ú–µ—Ç–æ–¥–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—ñ–π
  joinChatRoom(roomId) {
    if (this.socket && this.connected) {
      this.socket.emit('join_chat_room', roomId)
    }
  }

  leaveChatRoom(roomId) {
    if (this.socket && this.connected) {
      this.socket.emit('leave_chat_room', roomId)
    }
  }

  startTyping(roomId) {
    if (this.socket && this.connected) {
      this.socket.emit('typing_start', roomId)
    }
  }

  stopTyping(roomId) {
    if (this.socket && this.connected) {
      this.socket.emit('typing_stop', roomId)
    }
  }

  markNotificationRead(notificationId) {
    if (this.socket && this.connected) {
      this.socket.emit('mark_notification_read', notificationId)
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  isConnected() {
    return this.connected && this.socket && this.socket.connected
  }

  // –†—É—á–Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è (–¥–ª—è –¥–µ–±–∞–≥—É)
  reconnect() {
    this.disconnect()
    setTimeout(() => {
      this.reconnectAttempts = 0
      this.connect()
    }, 1000)
  }

  disconnect() {
    if (this.socket) {
      console.log('üîå Disconnecting Socket.io...')
      this.socket.disconnect()
      this.socket = null
      this.connected = false
    }
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton
export default new SocketService()
